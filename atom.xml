<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[linkkingjay's blog]]></title>
  <link href="http://linkkingjay.github.io/atom.xml" rel="self"/>
  <link href="http://linkkingjay.github.io/"/>
  <updated>2013-11-20T18:59:19+08:00</updated>
  <id>http://linkkingjay.github.io/</id>
  <author>
    <name><![CDATA[linkkingjay]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[有趣的汇编]]></title>
    <link href="http://linkkingjay.github.io/blog/2013/11/16/interesting-assembly/"/>
    <updated>2013-11-16T18:38:00+08:00</updated>
    <id>http://linkkingjay.github.io/blog/2013/11/16/interesting-assembly</id>
    <content type="html"><![CDATA[<p>学了半个学期的汇编，虽然老师有点坑，但是还是发现这门课挺有趣的。用的教材是王爽老师的<a href="http://book.douban.com/subject/3037562/">《汇编语言》</a>。在大学期间用过的教材里面算是非常不错的一本书了。折腾了一阵子，装上了dosemu，配好MASM和Debug，就可以在Ubunutu下写汇编了</p>

<hr />

<h3>兴趣</h3>

<p>对汇编感兴趣，不仅是因为听说它的速度快，更是因为我渴望看到程序最底层到底在做什么。我可以看到程序运行时内存的状态，而且我能控制它，小到每一个寄存器的每一位，都在我的掌控之中。我在一层一层揭开计算机的神秘面纱。</p>

<h3>渊源</h3>

<p>回想起来，其实很久以前我就做过修改内存的事情了：小学时候玩仙剑1用金山游侠修改经验值瞬间满级；中学时候玩口袋妖怪用金手指抓到稀有的pm，我就是在那个时候学会十六进制的，有一个地址是用来存放下一个遇到的pm的编号，用两位16进制表示，只要把这个地址改为想要抓的那只pm的编号对应的十六进制就可以遇到这只pm了。</p>

<h3>一个有趣的小问题</h3>

<p>教材上有一个问题，我觉得很有趣：把一个字符串（只由大写字母和小写字母组成）转化为大写（或者小写）。要是让我自己用一个函数来实现这个功能，我可能会这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">strupr</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">&#39;a&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">&#39;z&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">32</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">strlwr</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">&#39;Z&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">32</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>思路很简单，对每一个字符判断，若是<code>a-z</code>就减去32，转化为大写字母，若是<code>A-Z</code>就加上32转化为小写字母，这个程序我大一刚学C语言的时候就写过了。但书中提出了一种更有效的解法，这种解法不需要判断原来的字符是大写还是小写就能实现转化。答案其实很简单，观察一下大写字母和小写字母在ASCII码中的关系就可以知道答案了。举个例子，<code>a</code>的ASCII码是97，写成二进制就是01100001，<code>A</code>的ASCII码是65，写成二进制就是0100001。观察一下就可以发现，二者只有第五位不同（<code>a</code>的第五位是1，<code>A</code>的第五位是0）。其实换算成十进制，就是相差了2<sup>5</sup>=32。这也解答了我一直以来的疑惑：为什么ASCII码中小写字母不紧跟在大写字母后面？我想这是为加快大小写转换运算的速度吧。因为只有一位不同，所以我们很容易想到用位运算来解决问题，要知道，位运算的速度是很快的。所以大概就可以写出这样的程序：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">strupr</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xDF</span><span class="p">;</span> <span class="c1">// 0xDF是1101111的十六进制，跟它进行按位与运算能把第5位置为0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">strlwr</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">|</span> <span class="mh">0x20</span><span class="p">;</span> <span class="c1">// 0x20是0010000的十六进制，跟它进行按位或运算能把第5位置为1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>PS：按位与运算和按位或运算是C语言中的运算符，在汇编中有两条指令<code>and</code>和<code>or</code>与它们分别对应。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一个CodeIgniter应用]]></title>
    <link href="http://linkkingjay.github.io/blog/2013/09/14/codeigniter-hello-world/"/>
    <updated>2013-09-14T00:39:00+08:00</updated>
    <id>http://linkkingjay.github.io/blog/2013/09/14/codeigniter-hello-world</id>
    <content type="html"><![CDATA[<p><a href="http://ellislab.com/codeigniter">CodeIgniter</a>是一个基于<a href="http://zh.wikipedia.org/wiki/Mvc">MVC</a>的轻量级PHP框架，文档齐全，配置简单，上手容易（据说是抄<a href="http://zh.wikipedia.org/Ruby_on_Rails">ROR</a>的）。</p>

<h3>安装</h3>

<p>可以从<a href="https://github.com/EllisLab/CodeIgniter">Github</a>获取最新代码，或者从CI官网下载压缩包然后解压，把文件放到服务器文件夹中创建一个文件夹<code>ci</code>，把代码全部放到里面。</p>

<h3>URL分配</h3>

<p>假设有这样一个URL：<code>http://example.com/index.php/post/latest/10</code>，实际上它会调用<code>post</code>类的<code>latest</code>方法，并把<code>10</code>作为函数调用的参数，最终再把页面解析显示在用户的浏览器上面。这是CI中常见的URL格式：<code>http://example.com/index.php/[控制器类名]/[控制器方法名]/[参数]</code>。所以，控制器就是CI程序的入口。</p>

<h3>控制器类 Controller</h3>

<p>控制器类的代码放在<code>application/controllers/</code>里面。创建一个控制器文件<code>application/controllers/Hello.php</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Hello</span> <span class="k">extends</span> <span class="nx">CI_Controller</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;hello, world&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在浏览器地址栏里输入<code>http://localhost/ci/index.php/hello</code>，就可以看到我们在index方法中<code>echo</code>出来的hello, world了（这里应该可以猜到，如果没有指定方法名，就默认调用index方法）。</p>

<h3>视图类 View</h3>

<p>视图类的代码放在<code>application/views/</code>里面。创建一个视图文件<code>application/views/hello.php</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>helloworld<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>hello, world!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>I am <span class="cp">&lt;?php echo $name;?&gt;</span>, I am <span class="cp">&lt;?php echo $age;?&gt;</span> years old.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到两段嵌套在HTML代码中的PHP代码，里面输出了两个变量<code>$name</code>和<code>$age</code>，这两个变量在上面并没有定义，那它们是怎么来的呢？看下面：
修改<code>application/controllers/Hello.php</code>，添加以下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">view</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Link&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;age&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到我们在<code>view</code>方法中定义了<code>$data</code>数组，里面就有两个键名分别为<code>name</code>和<code>age</code>的值，然后我们执行了<code>$this-&gt;load-&gt;view('hello', $data);</code>这行代码，它会从<code>application/views</code>中寻找名为<code>hello.php</code>的文件，如果文件存在，就会加载这个页面，并把<code>$data</code>数组传递给它，这样我们就可以在<code>view/hello.php</code>中使用<code>$data</code>数组中的值。数组中的每个值都被定义成与它关键字相同的一个变量，如控制器中 <code>$data['name']</code> 的值就等同于视图中变量<code>$name</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP中的异常]]></title>
    <link href="http://linkkingjay.github.io/blog/2013/08/10/php-exception/"/>
    <updated>2013-08-10T10:14:00+08:00</updated>
    <id>http://linkkingjay.github.io/blog/2013/08/10/php-exception</id>
    <content type="html"><![CDATA[<h4>关于异常</h4>

<p>引用自<a href="http://book.douban.com/subject/3693851">《PHP与MySQL程序设计》</a>:</p>

<blockquote><p>在程序中，随时可能出现意料之外的事件，这些事件称为异常（exception）。通过放一个
代码段来处理错误，能够对异常妥善地做出响应，这称为抛出异常（throwing the
exception）。接下来，错误处理代码取得异常的所有权，即捕获异常。</p></blockquote>

<h4>经典的异常处理方式伪代码（沿用自C++）：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try {
</span><span class='line'>    if (something wrong) {
</span><span class='line'>        throw exception;
</span><span class='line'>    }
</span><span class='line'>} catch (Exception e) {
</span><span class='line'>    solve exception;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>PHP中的异常：</h4>

<p>PHP中的异常类包括一个不带参数的默认构造函数和一个带两个参数的重载构造函数，还有
6个方法。</p>

<ul>
<li>默认的构造函数:不带参数，可以这样使用<code>throw new Exception();</code></li>
<li>重载的构造函数:有两个可选参数<code>message</code>和<code>code</code>。</li>
<li>异常类的六个方法：

<ol>
<li> <code>getMessage()</code>返回传递给构造函数的信息。</li>
<li> <code>getCode()</code>返回传递给构造函数的错误代码。</li>
<li> <code>getLine()</code>返回出现错误的行号。</li>
<li> <code>getFile()</code>返回出现错误的文件名。</li>
<li> <code>getTrace()</code>返回一个数组，其中包括出现错误的文件名，行号，函数名和函数参数。</li>
<li> <code>getTraceAsString()</code>返回与<code>getTrace()</code>完全一样的内容，不过使用字符串的格式。</li>
</ol>
</li>
</ul>


<p>产生一个最基本的异常：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s1">&#39;被除数不能为0！&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$c</span> <span class="o">=</span> <span class="nv">$a</span> <span class="o">/</span> <span class="nv">$b</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$file</span> <span class="o">=</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getFile</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$line</span> <span class="o">=</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getLine</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$message</span> <span class="o">=</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;error (file:</span><span class="si">$file</span><span class="s2">, line:</span><span class="si">$line</span><span class="s2">): </span><span class="si">$message</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以通过继承异常类的方法扩展异常类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// 扩展的这个异常类可以把错误信息用邮件发送给管理员</span>
</span><span class='line'><span class="k">class</span> <span class="nc">My_Exception</span> <span class="k">extends</span> <span class="nx">Exception</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$message</span><span class="p">,</span> <span class="nv">$email</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">message</span> <span class="o">=</span> <span class="nv">$message</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">noteify_admin</span><span class="p">(</span><span class="nv">$email</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">notify_admin</span><span class="p">(</span><span class="nv">$email</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">mail</span><span class="p">(</span><span class="nv">$email</span><span class="p">,</span> <span class="s1">&#39;EXCEPTION&#39;</span><span class="p">,</span> <span class="nv">$message</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于一段代码，可能有多种结果出现，需要多种异常处理程序，也是很容易实现的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">login</span><span class="p">(</span><span class="nv">$user_name</span><span class="p">,</span> <span class="nv">$password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$user_name</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">string</span> <span class="nv">$messathrow</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s1">&#39;you must enter a user name!&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">elseif</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">My_Exception</span><span class="p">(</span><span class="s2">&quot;user:&#39;</span><span class="si">$user_name</span><span class="s2">&#39; login failed&quot;</span><span class="p">,</span> <span class="s1">&#39;admin@example.com&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">message</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">My_Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">message</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>资料</h4>

<p><a href="http://www.php.net/manual/en/class.exception.php">Exception manual</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Learning PHP &amp; MySQL》笔记]]></title>
    <link href="http://linkkingjay.github.io/blog/2013/08/08/learning-php-and-mysql-note/"/>
    <updated>2013-08-08T12:38:00+08:00</updated>
    <id>http://linkkingjay.github.io/blog/2013/08/08/learning-php-and-mysql-note</id>
    <content type="html"><![CDATA[<ol>
<li><h5>双引号和单引号字符串</h5>

<p>只要用双引号将字符串括起来，可以把一个变量，插入到字符串的定义里：
 &lt;?php
 $my_name = &ldquo;linkkingjay&rdquo;;
 echo &ldquo;My name is $my_name&rdquo;;
 ?></p></li>
<li><h5>比较字符串</h5>

<p><code>strcasecmp(string1, string2)</code>来比较两个字符串，忽略大小写。</p></li>
<li><h5>函数名是大小写无关的</h5>

<p>这个以前真心不知道。</p></li>
<li><h5>测试函数是否被定义</h5>

<p><code>function_exists("function_name");</code></p></li>
<li><h5>var语句声明的变量具有类的范围。</h5>

<p>类的范围意味着这写变量对类内部的所有方法可见，并且可以通过特殊的语法在类的外部被访问。var变量默认是public。
在类的内部使用方法或变量的时候，必须使用下面的语法：
<code>$this-&gt;variable or method name;</code></p></li>
<li><h5>判断一个变量是不是数组</h5>

<p><code>is_array()</code></p></li>
<li><h5>数组排序</h5>

<code>sort($array, [sort_flag]);</code>
sort_flag为可选的第二个参数，可能值有：

<ol>
<li>sort_regular 按通常情况比较元素，但不改变类型</li>
<li>sort_numeric 按数字比较元素</li>
<li>sort_string 按字符串比较元素</li>
<li>sort_locale_string 按本地语言字符串比较元素</li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
</feed>
